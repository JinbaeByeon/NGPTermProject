#define _WINSOCK_DEPRECATED_NO_WARNINGS // 최신 VC++ 컴파일 시 경고 방지
#include "stdafx.h"
#include "ServerFunc.h"
#include "CClientPacket.h"


int client_ID[3] = { 0 };
BOOL ThreadOn[3] = { false };

int Thread_Count = 0;

HANDLE hStartEvent;

Packet p;
Packet temp;

CRITICAL_SECTION cs;

// 클라이언트와 데이터 통신
DWORD WINAPI ThreadFunc(LPVOID arg)
{
    SOCKET client_sock = (SOCKET)arg;
    int retval;
    SOCKADDR_IN clientaddr;
    int addrlen;
    char buf[BUFSIZE + 1];

    int len;

    int Client_Num = Thread_Count - 1;
    client_ID[Client_Num] = (Client_Num+1)*100;
    
    int recv_ClientID = 0; // 데이터를 서버로 보내는 클라의 ID 저장

    int step = 1;
    int startsign = 0;

    // 클라이언트 정보 얻기
    addrlen = sizeof(clientaddr);
    getpeername(client_sock, (SOCKADDR*)&clientaddr, &addrlen);

    while (1) {
        // 클라이언트와 데이터 통신
        if (step == 1)
        {
            if (ThreadOn[Client_Num])
            {
                retval = send(client_sock, (char*)&client_ID[Client_Num], sizeof(int), 0);
                if (retval == SOCKET_ERROR) {
                    err_display("send()");
                    break;
                }
                else
                {
                    printf("[TCP 서버] %d번 클라이언트 ID 전송 : %d\n",
                        client_ID[Client_Num],  ntohs(clientaddr.sin_port));
                    step = 2;
                }
            }
        }
        else if (step == 2)
        {
            while (1)
            {
                if (ThreadOn[0] && ThreadOn[1])
                {
                    startsign = 1;
                    SetEvent(hStartEvent);
                    retval = send(client_sock, (char*)&startsign, sizeof(startsign), 0);
                    if (retval == SOCKET_ERROR) {
                        err_display("send()");
                        break;
                    }
                    break;
                }
            }
            WaitForSingleObject(hStartEvent, INFINITE);
            retval = recvn(client_sock, (char*)&recv_ClientID, sizeof(int), 0);
            if (retval == SOCKET_ERROR) {
                err_display("recv()");
                break;
            }
            retval = recvn(client_sock, (char*)&temp, sizeof(p), 0);
            if (retval == SOCKET_ERROR) {
                err_display("recv()");
                break;
            }
            if (temp.type != 0)
            {
                EnterCriticalSection(&cs);
                p = temp;
                LeaveCriticalSection(&cs);
            }
            printf("ID: %d <- recv: %d\n", recv_ClientID, temp.type);
            retval = send(client_sock, (char*)&recv_ClientID, sizeof(int), 0);
            if (retval == SOCKET_ERROR) {
                err_display("send()");
                break;
            }
            retval = send(client_sock, (char*)&p, sizeof(p), 0);
            if (retval == SOCKET_ERROR) {
                err_display("send()");
                break;
            }
            printf("ID: %d -> send: %d\n", client_ID[Client_Num], p.type);
            Sleep(3000);

        }

    }
    // closesocket()
    closesocket(client_sock);
    printf("[TCP 서버] %d번째 클라이언트 종료: IP 주소=%s, ID=%d\n",
        client_ID[Client_Num], inet_ntoa(clientaddr.sin_addr), ntohs(clientaddr.sin_port));
    ThreadOn[Client_Num] = FALSE;
    Thread_Count = Client_Num - 1;

    return 0;
}

int main(int argc, char* argv[])
{
    int retval;

    // 윈속 초기화
    WSADATA wsa;
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
        return 1;

    // socket()
    SOCKET listen_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (listen_sock == INVALID_SOCKET) err_quit("socket()");

    // bind()
    SOCKADDR_IN serveraddr;
    ZeroMemory(&serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serveraddr.sin_port = htons(SERVERPORT);
    retval = bind(listen_sock, (SOCKADDR*)&serveraddr, sizeof(serveraddr));
    if (retval == SOCKET_ERROR) err_quit("bind()");

    // listen()
    retval = listen(listen_sock, SOMAXCONN);
    if (retval == SOCKET_ERROR) err_quit("listen()");

    // 데이터 통신에 사용할 변수
    FD_SET rset, wset;
    SOCKET client_sock;
    SOCKADDR_IN clientaddr;
    int addrlen, i;
    HANDLE hThread[3];

    InitializeCriticalSection(&cs);

    while (1) {
        if (Thread_Count < MAX_CLIENT)
        {
            // accept()
            addrlen = sizeof(clientaddr);
            client_sock = accept(listen_sock, (SOCKADDR*)&clientaddr, &addrlen);
            if (client_sock == INVALID_SOCKET) {
                err_display("accept()");
                break;
            }
            else
            {
                ThreadOn[Thread_Count] = TRUE;
                Thread_Count++;
            }

            hStartEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

            // 접속한 클라이언트 정보 출력
            printf("\n[TCP 서버] %d번 클라이언트 접속: IP 주소=%s, 포트 번호=%d\n",
                Thread_Count, inet_ntoa(clientaddr.sin_addr), ntohs(clientaddr.sin_port));

            // 스레드 생성
            hThread[Thread_Count-1] = CreateThread(NULL, 0, ThreadFunc,
                (LPVOID)client_sock, 0, NULL);
            if (hThread[Thread_Count - 1] == NULL) { closesocket(client_sock); }
            else { CloseHandle(hThread[Thread_Count - 1]); }
        }

    }
    DeleteCriticalSection(&cs);

    // closesocket()
    closesocket(listen_sock);


    // 윈속 종료
    WSACleanup();
    return 0;
}
